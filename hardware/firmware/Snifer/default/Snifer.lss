
Snifer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000084  00800060  00800060  000002d2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001df  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000675  00000000  00000000  000004d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000237  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ff  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000279  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c7  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	e9 c0       	rjmp	.+466    	; 0x1d6 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	d2 c0       	rjmp	.+420    	; 0x1b8 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 3e       	cpi	r26, 0xE4	; 228
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	06 d1       	rcall	.+524    	; 0x250 <main>
  44:	0a c1       	rjmp	.+532    	; 0x25a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <USART_Init>:
	
	uint8_t tx_buf[30];
	uint8_t rx_buf[50];

void USART_Init() {
	UBRRL = LO(bauddivider);//
  48:	83 e3       	ldi	r24, 0x33	; 51
  4a:	89 b9       	out	0x09, r24	; 9
	UBRRH = HI(bauddivider);//
  4c:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0;
  4e:	1b b8       	out	0x0b, r1	; 11
	UCSRB = _BV(RXEN)|_BV(TXEN)|1<<RXCIE|0<<TXCIE|1<<UDR;
  50:	2c b1       	in	r18, 0x0c	; 12
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	02 c0       	rjmp	.+4      	; 0x5c <USART_Init+0x14>
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	2a 95       	dec	r18
  5e:	e2 f7       	brpl	.-8      	; 0x58 <USART_Init+0x10>
  60:	88 69       	ori	r24, 0x98	; 152
  62:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  64:	86 e8       	ldi	r24, 0x86	; 134
  66:	80 bd       	out	0x20, r24	; 32
	}
  68:	08 95       	ret

0000006a <USART_Transmit>:


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  6a:	5d 9b       	sbis	0x0b, 5	; 11
  6c:	fe cf       	rjmp	.-4      	; 0x6a <USART_Transmit>
	tx_buf[0]=0;
  6e:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
  72:	8c b9       	out	0x0c, r24	; 12
	}
  74:	08 95       	ret

00000076 <USART_SendBuff>:

void USART_SendBuff(char *tbadr) {
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	06 c0       	rjmp	.+12     	; 0x86 <USART_SendBuff+0x10>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_SendBuff+0x4>
	tx_buf[0]=0;
  7e:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
  82:	ec b9       	out	0x0c, r30	; 12

void USART_SendBuff(char *tbadr) {
	uint8_t i = 0;
	while (((tbadr[i]!= '\n') & (tbadr[i]!= 0))) {
		USART_Transmit((tbadr[i]));
		i++;
  84:	2f 5f       	subi	r18, 0xFF	; 255
	UDR = data;			// Put data into buffer, send data
	}

void USART_SendBuff(char *tbadr) {
	uint8_t i = 0;
	while (((tbadr[i]!= '\n') & (tbadr[i]!= 0))) {
  86:	fc 01       	movw	r30, r24
  88:	e2 0f       	add	r30, r18
  8a:	f1 1d       	adc	r31, r1
  8c:	e0 81       	ld	r30, Z
  8e:	ea 30       	cpi	r30, 0x0A	; 10
  90:	11 f0       	breq	.+4      	; 0x96 <USART_SendBuff+0x20>
  92:	ee 23       	and	r30, r30
  94:	91 f7       	brne	.-28     	; 0x7a <USART_SendBuff+0x4>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <USART_SendBuff+0x20>
	tx_buf[0]=0;
  9a:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	8c b9       	out	0x0c, r24	; 12
	while (((tbadr[i]!= '\n') & (tbadr[i]!= 0))) {
		USART_Transmit((tbadr[i]));
		i++;
    };
	USART_Transmit(10); 
	}
  a2:	08 95       	ret

000000a4 <SendStr_P>:


void SendStr_P(char *string) {				// Отправка строки из флеша
  a4:	fc 01       	movw	r30, r24
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <SendStr_P+0xc>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <SendStr_P+0x4>
	tx_buf[0]=0;
	UDR = data;			// Put data into buffer, send data
  ac:	8c b9       	out	0x0c, r24	; 12


void SendStr_P(char *string) {				// Отправка строки из флеша
	while (pgm_read_byte(string)!='\0') {
		USART_Transmit(pgm_read_byte(string));
		string++;
  ae:	31 96       	adiw	r30, 0x01	; 1
	USART_Transmit(10); 
	}


void SendStr_P(char *string) {				// Отправка строки из флеша
	while (pgm_read_byte(string)!='\0') {
  b0:	84 91       	lpm	r24, Z+
  b2:	88 23       	and	r24, r24
  b4:	c9 f7       	brne	.-14     	; 0xa8 <SendStr_P+0x4>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <SendStr_P+0x12>
	tx_buf[0]=0;
	UDR = data;			// Put data into buffer, send data
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	8c b9       	out	0x0c, r24	; 12
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <SendStr_P+0x1a>
	tx_buf[0]=0;
  c2:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	8c b9       	out	0x0c, r24	; 12
		USART_Transmit(pgm_read_byte(string));
		string++;
		};
	USART_Transmit(0x0D);
	USART_Transmit(0x0A);
	}
  ca:	08 95       	ret

000000cc <USART_SendBuffCode>:

void USART_SendBuffCode(u08 *tbadr,u08 size) {
  cc:	fc 01       	movw	r30, r24
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <USART_SendBuffCode+0x14>
	uint8_t i = 0;
	while (size > 0) {
		USART_Transmit((tbadr[i]));
  d0:	80 81       	ld	r24, Z
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <USART_SendBuffCode+0x6>
	tx_buf[0]=0;
  d6:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
  da:	8c b9       	out	0x0c, r24	; 12
void USART_SendBuffCode(u08 *tbadr,u08 size) {
	uint8_t i = 0;
	while (size > 0) {
		USART_Transmit((tbadr[i]));
		i++;
		size--;
  dc:	61 50       	subi	r22, 0x01	; 1
  de:	31 96       	adiw	r30, 0x01	; 1
	USART_Transmit(0x0A);
	}

void USART_SendBuffCode(u08 *tbadr,u08 size) {
	uint8_t i = 0;
	while (size > 0) {
  e0:	66 23       	and	r22, r22
  e2:	b1 f7       	brne	.-20     	; 0xd0 <USART_SendBuffCode+0x4>
		USART_Transmit((tbadr[i]));
		i++;
		size--;
    };
	}
  e4:	08 95       	ret

000000e6 <OwClient_Pullup>:
*/


//-------------------------------------------------------------------[Включить поддтяжку порта для зарядки устройства]--- 
void OwClient_Pullup(bool A){
	if (A) {
  e6:	88 23       	and	r24, r24
  e8:	69 f0       	breq	.+26     	; 0x104 <OwClient_Pullup+0x1e>
 		ClrBit(DeviceQ_PORT);	
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	84 70       	andi	r24, 0x04	; 4
  f0:	89 27       	eor	r24, r25
  f2:	82 bb       	out	0x12, r24	; 18
		NOP;
  f4:	00 00       	nop
	 	ClrBit(DeviceQ_DDR);	
  f6:	91 b3       	in	r25, 0x11	; 17
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	84 70       	andi	r24, 0x04	; 4
  fc:	89 27       	eor	r24, r25
  fe:	81 bb       	out	0x11, r24	; 17
		NOP;
 100:	00 00       	nop
 102:	08 95       	ret
		}				// для зарядки аккумулятора устройства на порту}
 	else	{
		ClrBit(DeviceQ_PORT);	
 104:	92 b3       	in	r25, 0x12	; 18
 106:	82 b3       	in	r24, 0x12	; 18
 108:	84 70       	andi	r24, 0x04	; 4
 10a:	89 27       	eor	r24, r25
 10c:	82 bb       	out	0x12, r24	; 18
		NOP;
 10e:	00 00       	nop
		SetBit(DeviceQ_DDR);	
 110:	8a 9a       	sbi	0x11, 2	; 17
		NOP;
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <OwClient_Init>:
//----------------------------------------------------------------------------------------------------------------------- 


//-------------------------------------------------------------[установка начального направления порта для устройства]--- 
void OwClient_Init(void){
	OwClient_Pullup(1);								// для зарядки аккумулятора устройства на порту
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	e6 df       	rcall	.-52     	; 0xe6 <OwClient_Pullup>
	}
 11a:	08 95       	ret

0000011c <OwClient_read_bit>:
//----------------------------------------------------------------------------------------------------------------------- 


//-------------------------------------------------------------------------------------------------[OwClient_read_bit]--- 
u08 OwClient_read_bit(void){
 11c:	04 c0       	rjmp	.+8      	; 0x126 <OwClient_read_bit+0xa>
	u08 result = 0x00;
	while (GetBitH(DeviceQ_PIN)) {if (_deviceQ_Is_Reset==1) break;};
 11e:	80 91 8a 00 	lds	r24, 0x008A
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	11 f0       	breq	.+4      	; 0x12a <OwClient_read_bit+0xe>
 126:	82 99       	sbic	0x10, 2	; 16
 128:	fa cf       	rjmp	.-12     	; 0x11e <OwClient_read_bit+0x2>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 12a:	80 e5       	ldi	r24, 0x50	; 80
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <OwClient_read_bit+0x10>
	_delay_us(DeviceQ_delay_A);																			// задержка 15us 
  if (GetBitH(DeviceQ_PIN))	result = 0x01; else result = 0x00;		// если на ножке логическая 1 результат 1 								
 130:	80 b3       	in	r24, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 132:	e8 ec       	ldi	r30, 0xC8	; 200
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <OwClient_read_bit+0x1a>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
	_delay_us(DeviceQ_delay_F);																			// жду конец таймслота
	return (result);																								// возвращаем значение линии данных
	}
 144:	81 70       	andi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <OwClient_read_byte>:
//----------------------------------------------------------------------------------------------------------------------- 

//------------------------------------------------------------------------------------------------[OwClient_read_byte]--- 
u08 OwClient_read_byte(void){
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
	u08 result = 0x00;
 	for(int i = 0; i < 8; i++) {																		// цикл чтения бит
		if (_deviceQ_Is_Reset==1) break;
 154:	80 91 8a 00 	lds	r24, 0x008A
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	69 f0       	breq	.+26     	; 0x176 <OwClient_read_byte+0x2e>
		result |= OwClient_read_bit() << i;
 15c:	df df       	rcall	.-66     	; 0x11c <OwClient_read_bit>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0c 2e       	mov	r0, r28
 162:	02 c0       	rjmp	.+4      	; 0x168 <OwClient_read_byte+0x20>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <OwClient_read_byte+0x1c>
 16c:	18 2b       	or	r17, r24
//----------------------------------------------------------------------------------------------------------------------- 

//------------------------------------------------------------------------------------------------[OwClient_read_byte]--- 
u08 OwClient_read_byte(void){
	u08 result = 0x00;
 	for(int i = 0; i < 8; i++) {																		// цикл чтения бит
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	c8 30       	cpi	r28, 0x08	; 8
 172:	d1 05       	cpc	r29, r1
 174:	79 f7       	brne	.-34     	; 0x154 <OwClient_read_byte+0xc>
		if (_deviceQ_Is_Reset==1) break;
		result |= OwClient_read_bit() << i;
 		};
	return (result);	
	}
 176:	81 2f       	mov	r24, r17
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	08 95       	ret

00000180 <OwClient_check_Ram_CMD>:
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <OwClient_check_Ram_CMD>
	tx_buf[0]=0;
 184:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
 188:	8c b9       	out	0x0c, r24	; 12
		case MATCH_ROM: OwClient_match_Rom(); break;
		case SEARCH_ROM: OwClient_search_Rom(); break;
		case SKIP_ROM: break;
		default: while (_deviceQ_Is_Reset !=1); break;
		}*/
	}
 18a:	08 95       	ret

0000018c <OwClient_check_Rom_CMD>:
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <OwClient_check_Rom_CMD>
	tx_buf[0]=0;
 190:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
 194:	8c b9       	out	0x0c, r24	; 12
		case READ_STATUS_REG: OwClient_read_StatusReg(); break;
		case READ_APP_REG: OwClient_read_AppReg(); break;
		case COPY_LOCK_APP_REG: OwClient_lock_AppReg(); break;
		default: while (_deviceQ_Is_Reset !=1); break;
		}*/
	}
 196:	08 95       	ret

00000198 <MainInit>:
	void MainInit(void);	

	void MainInit(void){

	DDRD 	|= 0<<PD2|0<<PD3;
 198:	81 b3       	in	r24, 0x11	; 17
 19a:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0<<PD2|0<<PD3;
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	82 bb       	out	0x12, r24	; 18

	DDRC |= 1<<PC5;
 1a0:	a5 9a       	sbi	0x14, 5	; 20
	PORTC |= 1<<PC5;
 1a2:	ad 9a       	sbi	0x15, 5	; 21


	MCUCR |= 0<<ISC01|1<<ISC00;
 1a4:	85 b7       	in	r24, 0x35	; 53
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	85 bf       	out	0x35, r24	; 53
	GIMSK=1<<INT0;
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	8b bf       	out	0x3b, r24	; 59

	
	TIMSK=1<<TOIE0;//Разрешение припиваний Т0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	89 bf       	out	0x39, r24	; 57



	sei();
 1b2:	78 94       	sei
	
	OwClient_Init();
 1b4:	b0 df       	rcall	.-160    	; 0x116 <OwClient_Init>


	};
 1b6:	08 95       	ret

000001b8 <__vector_9>:
ISR (TIMER0_OVF_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	_deviceQ_last_line=255;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	80 93 61 00 	sts	0x0061, r24
	}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_1>:

ISR(INT0_vect){				// Обработчик прерывания INT0
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
	if (GetBitH(DeviceQ_PIN)){
 1e2:	82 9b       	sbis	0x10, 2	; 16
 1e4:	10 c0       	rjmp	.+32     	; 0x206 <__vector_1+0x30>
		TCCR0=0;
 1e6:	13 be       	out	0x33, r1	; 51
		if (_deviceQ_last_line != 255) _deviceQ_last_line = TCNT0;
 1e8:	80 91 61 00 	lds	r24, 0x0061
 1ec:	8f 3f       	cpi	r24, 0xFF	; 255
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <__vector_1+0x20>
 1f0:	82 b7       	in	r24, 0x32	; 50
 1f2:	80 93 61 00 	sts	0x0061, r24
		if (_deviceQ_last_line >110) _deviceQ_Is_Reset=1;	
 1f6:	80 91 61 00 	lds	r24, 0x0061
 1fa:	8f 36       	cpi	r24, 0x6F	; 111
 1fc:	58 f0       	brcs	.+22     	; 0x214 <__vector_1+0x3e>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 8a 00 	sts	0x008A, r24
 204:	07 c0       	rjmp	.+14     	; 0x214 <__vector_1+0x3e>
		}
		else {
			TCNT0=0;
 206:	12 be       	out	0x32, r1	; 50
			SFIOR=1<<PSR10;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 bf       	out	0x30, r24	; 48
			TCCR0=3;
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	83 bf       	out	0x33, r24	; 51
			_deviceQ_last_line=0;
 210:	10 92 61 00 	sts	0x0061, r1
			};
	}
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <chek>:
	#define F_CPU 16000000L					/* CPU frequency */

	#include "includes.h"	
//-----------------------------------------------------------------------------------------------------------------------
void chek(void){
	while (_deviceQ_Is_Reset!=1);  
 220:	80 91 8a 00 	lds	r24, 0x008A
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	e1 f7       	brne	.-8      	; 0x220 <chek>
	_deviceQ_Is_Reset =2;
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 8a 00 	sts	0x008A, r24
	OwClient_check_Ram_CMD(OwClient_read_byte());
 22e:	8c df       	rcall	.-232    	; 0x148 <OwClient_read_byte>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
 230:	5d 9b       	sbis	0x0b, 5	; 11
 232:	fe cf       	rjmp	.-4      	; 0x230 <chek+0x10>
	tx_buf[0]=0;
 234:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
 238:	8c b9       	out	0x0c, r24	; 12
	if (_deviceQ_Is_Reset==2) 
 23a:	80 91 8a 00 	lds	r24, 0x008A
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	31 f4       	brne	.+12     	; 0x24e <chek+0x2e>
		OwClient_check_Rom_CMD(OwClient_read_byte());
 242:	82 df       	rcall	.-252    	; 0x148 <OwClient_read_byte>
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	}


void USART_Transmit(uint8_t data) {
	while (!(UCSRA&(1<<UDRE)));	// Wait for empty transmit buffer
 244:	5d 9b       	sbis	0x0b, 5	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <chek+0x24>
	tx_buf[0]=0;
 248:	10 92 bd 00 	sts	0x00BD, r1
	UDR = data;			// Put data into buffer, send data
 24c:	8c b9       	out	0x0c, r24	; 12
 24e:	08 95       	ret

00000250 <main>:
	};



int main(void){
	MainInit();
 250:	a3 df       	rcall	.-186    	; 0x198 <MainInit>
	_deviceQ_Is_Reset = 0;
 252:	10 92 8a 00 	sts	0x008A, r1
	while (1){
		chek();
 256:	e4 df       	rcall	.-56     	; 0x220 <chek>
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0x6>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
